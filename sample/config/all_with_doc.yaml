common_config:
  compiler: null # Path to compiler, if null, the first valid one in ["c++","g++","clang++"] will be used. It will be used to detect system level include directories
  cxx_flags: [ "-std=c++11", ] # A list of cxx flags, It will be used to help frontend to parse the source file correctly.
  include_directories: [ "/path/to/foo","/path/to/bar" ] # A list of extra include path, these paths will be converted to `-I` flags
  output_namespace: "foo::bar" # A c++ style name space that output code should reside into
  root_module_namespace: "" # by default, the global name space will map to python's root module, user could use this arg to specify the namespace that will be used as root module.

# A list of dict that specifies files that needed to be generated
io_configs:
  - inputs: [ "a.h","<bar.h>" ] # a list of path of header files, these files should be able to find by C++ `#include` directive.
    output: "/path/to/output" # Path to output file's base name, two file of /path/to/output.h and /path/to/output.cc will be generated.
    output_namespace: "foo" # this will override the value in shared_config
    extra_cxx_flags: [ ] # these flags will be used only for this file
